# Generated by Django 4.0.2 on 2022-06-13 11:32

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import drivingschool.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('middle_name', models.CharField(blank=True, max_length=150, verbose_name='Отчество')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('phone_number', models.CharField(blank=True, max_length=127, validators=[drivingschool.models.validate_phone_number], verbose_name='Телефон')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Мужской'), ('F', 'Женский')], max_length=1, verbose_name='Пол')),
                ('photo', models.ImageField(default='avatars/default-profile.png', upload_to='avatars/', verbose_name='Фото')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Cabinet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cabinet', models.CharField(max_length=31, verbose_name='Кабинет')),
            ],
            options={
                'verbose_name': 'Кабинет',
                'verbose_name_plural': 'Кабинеты',
            },
        ),
        migrations.CreateModel(
            name='CallApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, verbose_name='Имя')),
                ('phone_number', models.CharField(max_length=20, verbose_name='Телефон')),
            ],
            options={
                'verbose_name': 'Заявка',
                'verbose_name_plural': 'Заявки',
            },
        ),
        migrations.CreateModel(
            name='Car',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transmission', models.IntegerField(choices=[(0, 'Механика'), (1, 'Автомат')], verbose_name='Коробка передач')),
                ('state_number', models.CharField(max_length=15, verbose_name='Госномер')),
            ],
            options={
                'verbose_name': 'Автомобиль',
                'verbose_name_plural': 'Автомобили',
            },
        ),
        migrations.CreateModel(
            name='CarBrand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=127, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Марка авто',
                'verbose_name_plural': 'Марки авто',
            },
        ),
        migrations.CreateModel(
            name='CarModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=127, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Модель авто',
                'verbose_name_plural': 'Модели авто',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=31, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Группа',
                'verbose_name_plural': 'Группы',
            },
        ),
        migrations.CreateModel(
            name='Instructor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('car', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='drivingschool.car', verbose_name='Авто')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Инструктор',
                'verbose_name_plural': 'Инструкторы',
            },
        ),
        migrations.CreateModel(
            name='TopicPractice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=127, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Тема практическая',
                'verbose_name_plural': 'Темы практические',
            },
        ),
        migrations.CreateModel(
            name='TopicTheory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=127, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Тема теоритическая',
                'verbose_name_plural': 'Темы теоритические',
            },
        ),
        migrations.CreateModel(
            name='Tutor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cabinet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='drivingschool.cabinet', verbose_name='Кабинет')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Преподаватель',
                'verbose_name_plural': 'Преподаватели',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('license_category', models.CharField(choices=[('А', 'A'), ('Б', 'B'), ('В', 'C'), ('Г', 'D'), ('Д', 'E')], max_length=1, verbose_name='Категория прав')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='drivingschool.group', verbose_name='Группа')),
                ('instructor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='drivingschool.instructor', verbose_name='Инструктор')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Обучающийся',
                'verbose_name_plural': 'Обучающиеся',
            },
        ),
        migrations.CreateModel(
            name='ScheduleTheory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weekday', models.IntegerField(choices=[(0, 'Понедельник'), (1, 'Вторник'), (2, 'Среда'), (3, 'Четверг'), (4, 'Пятница'), (5, 'Суббота'), (6, 'Воскресенье')], verbose_name='День недели')),
                ('position', models.IntegerField(choices=[(1, '9:00 - 10:30'), (2, '10:40 - 12:10'), (3, '12:50 - 14:20'), (4, '14:30 - 16:00'), (5, '16:30 - 18:00'), (6, '18:30 - 20:00')], verbose_name='Время')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='drivingschool.group', verbose_name='Группа')),
                ('substitute_tutor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='drivingschool.tutor', verbose_name='Учитель на замену')),
            ],
            options={
                'verbose_name': 'Расписание теор. занятий',
                'verbose_name_plural': 'Расписания теор. занятий',
                'ordering': ('group', 'weekday', 'position'),
            },
        ),
        migrations.CreateModel(
            name='SchedulePractice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weekday', models.IntegerField(choices=[(0, 'Понедельник'), (1, 'Вторник'), (2, 'Среда'), (3, 'Четверг'), (4, 'Пятница'), (5, 'Суббота'), (6, 'Воскресенье')], verbose_name='День недели')),
                ('position', models.IntegerField(choices=[(1, '9:00 - 10:30'), (2, '10:40 - 12:10'), (3, '12:50 - 14:20'), (4, '14:30 - 16:00'), (5, '16:30 - 18:00'), (6, '18:30 - 20:00')], verbose_name='Время')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='drivingschool.student', verbose_name='Обучающийся')),
            ],
            options={
                'verbose_name': 'Расписание прак. занятий',
                'verbose_name_plural': 'Расписания прак. занятий',
                'ordering': ('weekday', 'position', 'student'),
            },
        ),
        migrations.CreateModel(
            name='Mark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mark', models.IntegerField(choices=[(5, 'Отлично'), (4, 'Хорошо'), (3, 'Удовлетворительно'), (2, 'Неудовлетворительно'), (1, 'Кол')], verbose_name='Оценка')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Поставлена')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Изменена')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='drivingschool.student', verbose_name='Обучающийся')),
            ],
            options={
                'verbose_name': 'Оценка',
                'verbose_name_plural': 'Оценки',
            },
        ),
        migrations.CreateModel(
            name='LessonTheory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started_at', models.DateTimeField(auto_now=True, verbose_name='Дата начала')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='drivingschool.group', verbose_name='Группа')),
                ('topic', models.ManyToManyField(to='drivingschool.TopicTheory', verbose_name='Тема')),
                ('tutor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='drivingschool.tutor', verbose_name='Преподаватель')),
            ],
            options={
                'verbose_name': 'Занятие теоритическое',
                'verbose_name_plural': 'Занятия теоритические',
            },
        ),
        migrations.CreateModel(
            name='LessonPractice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started_at', models.DateTimeField(blank=True, verbose_name='Дата начала')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='drivingschool.student', verbose_name='Обучающийся')),
                ('topic', models.ManyToManyField(to='drivingschool.TopicPractice', verbose_name='Тема')),
            ],
            options={
                'verbose_name': 'Занятие практическое',
                'verbose_name_plural': 'Занятия практические',
            },
        ),
        migrations.AddField(
            model_name='group',
            name='tutor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='drivingschool.tutor', verbose_name='Преподаватель'),
        ),
        migrations.AddField(
            model_name='car',
            name='brand',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='drivingschool.carbrand', verbose_name='Марка'),
        ),
        migrations.AddField(
            model_name='car',
            name='model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='drivingschool.carmodel', verbose_name='Модель'),
        ),
    ]
